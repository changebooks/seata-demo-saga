<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <property name="channel" value="${spring.application.name}"/>
    <!-- 引入springboot的默认日志配置 -->
    <include resource="org/springframework/boot/logging/logback/defaults.xml"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "channel": "${channel}",
                        "url": "${hostName}",
                        "thread": "%thread",
                        "time": "%date{ISO8601}",
                        "level": "%level",
                        "trace": "%X{traceId}",
                        "span": "%X{spanId}",
                        "message": "%m",
                        "stacktrace": "%ex"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>

    <appender name="ROLLING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>logs/file.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>logs/file.%i.log.gz</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>1</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>200MB</maxFileSize>
        </triggeringPolicy>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "channel": "${channel}",
                        "url": "${hostName}",
                        "thread": "%thread",
                        "time": "%date{ISO8601}",
                        "level": "%level",
                        "trace": "%X{traceId}",
                        "span": "%X{spanId}",
                        "message": "%m",
                        "stacktrace": "%ex"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>

    <appender name="LOG_MONITOR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>logs/monitorFile.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
            <fileNamePattern>logs/monitor.file.%i.log.gz</fileNamePattern>
            <minIndex>1</minIndex>
            <maxIndex>1</maxIndex>
        </rollingPolicy>

        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>200MB</maxFileSize>
        </triggeringPolicy>

        <encoder class="net.logstash.logback.encoder.LoggingEventCompositeJsonEncoder">
            <providers>
                <pattern>
                    <pattern>
                        {
                        "channel": "${channel}",
                        "url": "${hostName}",
                        "thread": "%thread",
                        "time": "%date{ISO8601}",
                        "level": "%level",
                        "trace": "%X{traceId}",
                        "span": "%X{spanId}",
                        "message": "%m",
                        "stacktrace": "%ex"
                        }
                    </pattern>
                </pattern>
            </providers>
        </encoder>
    </appender>

    <!-- 异步输出 -->
    <appender name="LOG_MONITOR_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 默认为 false，在队列满的时候 appender 会阻塞而不是丢弃信息。设置为 true，appender 不会阻塞你的应用而会将消息丢弃 -->
        <neverBlock>true</neverBlock>
        <!-- 不丢失日志。默认的，如果队列的80%已满，则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>1638</discardingThreshold>
        <!-- 更改默认的队列的深度，该值会影响性能。默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender，最多只能添加一个 -->
        <appender-ref ref="LOG_MONITOR_FILE"/>
    </appender>

    <!-- 异步输出 -->
    <appender name="ROLLING_FILE_ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 默认为 false，在队列满的时候 appender 会阻塞而不是丢弃信息。设置为 true，appender 不会阻塞你的应用而会将消息丢弃 -->
        <neverBlock>true</neverBlock>
        <!-- 不丢失日志。默认的，如果队列的80%已满，则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>1638</discardingThreshold>
        <!-- 更改默认的队列的深度，该值会影响性能。默认值为256 -->
        <queueSize>2048</queueSize>
        <!-- 添加附加的appender，最多只能添加一个 -->
        <appender-ref ref="ROLLING_FILE"/>
    </appender>

    <!-- 控制台输出日志级别 -->
    <root level="INFO">
        <appender-ref ref="CONSOLE"/>
        <!--                <appender-ref ref="ROLLING_FILE_ASYNC"/>-->
    </root>

    <logger name="log_monitor" level="INFO" additivity="false">
        <appender-ref ref="LOG_MONITOR_FILE_ASYNC"/>
    </logger>
</configuration>